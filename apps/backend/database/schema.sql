-- BiteBase Production Database Schema
-- PostgreSQL with PostGIS Extensions
-- This file documents the expected database schema for BiteBase

-- Enable PostGIS extension (already done via init script)
-- CREATE EXTENSION IF NOT EXISTS postgis;

-- ============================================================================
-- CORE STRAPI TABLES (Auto-generated by Strapi)
-- ============================================================================

-- These tables will be automatically created by Strapi on first run:
-- - strapi_database_schema
-- - strapi_migrations
-- - strapi_webhooks
-- - strapi_api_tokens
-- - strapi_api_token_permissions
-- - strapi_transfer_tokens
-- - strapi_transfer_token_permissions
-- - strapi_core_store_settings
-- - strapi_administrator_roles
-- - strapi_administrators
-- - strapi_administrators_roles_links

-- ============================================================================
-- USER MANAGEMENT TABLES
-- ============================================================================

-- up_permissions (User Permissions)
-- up_roles (User Roles) 
-- up_users (End Users)
-- up_users_role_links

-- ============================================================================
-- BITEBASE BUSINESS LOGIC TABLES
-- ============================================================================

-- Restaurant Profiles
-- This will be auto-generated by Strapi based on content types
-- Expected structure:
/*
CREATE TABLE restaurant_profiles (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    cuisine_type VARCHAR(100),
    price_range VARCHAR(50),
    target_demographic JSONB,
    business_hours JSONB,
    contact_info JSONB,
    owner_id INTEGER REFERENCES up_users(id),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    published_at TIMESTAMP
);
*/

-- Location Analysis
-- Expected structure:
/*
CREATE TABLE location_analyses (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    address TEXT,
    coordinates GEOMETRY(POINT, 4326), -- PostGIS point
    analysis_data JSONB, -- Store complex analysis results
    opportunity_score DECIMAL(3,1),
    competition_level VARCHAR(50),
    foot_traffic_score INTEGER,
    demographic_match DECIMAL(3,1),
    revenue_potential DECIMAL(12,2),
    restaurant_profile_id INTEGER,
    user_id INTEGER REFERENCES up_users(id),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    published_at TIMESTAMP
);
*/

-- Market Research Data
-- Expected structure:
/*
CREATE TABLE market_research_data (
    id SERIAL PRIMARY KEY,
    location_id INTEGER,
    research_type VARCHAR(100), -- 'demographic', 'competition', 'traffic', etc.
    data_source VARCHAR(100),
    raw_data JSONB,
    processed_insights JSONB,
    confidence_score DECIMAL(3,1),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
*/

-- Competitor Analysis
-- Expected structure:
/*
CREATE TABLE competitor_analyses (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255),
    location GEOMETRY(POINT, 4326),
    cuisine_type VARCHAR(100),
    price_range VARCHAR(50),
    rating DECIMAL(2,1),
    review_count INTEGER,
    business_hours JSONB,
    menu_analysis JSONB,
    strengths TEXT[],
    weaknesses TEXT[],
    distance_from_target DECIMAL(8,2), -- in meters
    threat_level VARCHAR(50),
    location_analysis_id INTEGER,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
*/

-- AI Chat Sessions
-- Expected structure:
/*
CREATE TABLE ai_chat_sessions (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES up_users(id),
    session_id UUID DEFAULT gen_random_uuid(),
    messages JSONB, -- Array of message objects
    context_data JSONB, -- Current analysis context
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
*/

-- User Subscriptions
-- Expected structure:
/*
CREATE TABLE user_subscriptions (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES up_users(id) UNIQUE,
    plan_type VARCHAR(50) NOT NULL, -- 'starter', 'pro', 'enterprise'
    status VARCHAR(50) DEFAULT 'active', -- 'active', 'cancelled', 'expired'
    billing_cycle VARCHAR(20), -- 'monthly', 'yearly'
    amount DECIMAL(10,2),
    currency VARCHAR(3) DEFAULT 'USD',
    stripe_subscription_id VARCHAR(255),
    stripe_customer_id VARCHAR(255),
    current_period_start TIMESTAMP,
    current_period_end TIMESTAMP,
    trial_end TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
*/

-- Reports and Analytics
-- Expected structure:
/*
CREATE TABLE generated_reports (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES up_users(id),
    report_type VARCHAR(100), -- 'location_analysis', 'market_overview', 'competitor_report'
    title VARCHAR(255),
    content JSONB, -- Report data and visualizations
    pdf_url TEXT, -- Link to generated PDF
    parameters JSONB, -- Report generation parameters
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
*/

-- ============================================================================
-- INDEXES FOR PERFORMANCE
-- ============================================================================

-- Spatial indexes (will be created automatically for PostGIS geometry columns)
-- CREATE INDEX idx_location_analyses_coordinates ON location_analyses USING GIST (coordinates);
-- CREATE INDEX idx_competitor_analyses_location ON competitor_analyses USING GIST (location);

-- Regular indexes for common queries
-- CREATE INDEX idx_restaurant_profiles_owner ON restaurant_profiles(owner_id);
-- CREATE INDEX idx_location_analyses_user ON location_analyses(user_id);
-- CREATE INDEX idx_location_analyses_restaurant ON location_analyses(restaurant_profile_id);
-- CREATE INDEX idx_market_research_location ON market_research_data(location_id);
-- CREATE INDEX idx_competitor_analyses_location_analysis ON competitor_analyses(location_analysis_id);
-- CREATE INDEX idx_ai_chat_sessions_user ON ai_chat_sessions(user_id);
-- CREATE INDEX idx_user_subscriptions_user ON user_subscriptions(user_id);
-- CREATE INDEX idx_generated_reports_user ON generated_reports(user_id);

-- JSON indexes for JSONB columns
-- CREATE INDEX idx_restaurant_profiles_target_demographic ON restaurant_profiles USING GIN (target_demographic);
-- CREATE INDEX idx_location_analyses_analysis_data ON location_analyses USING GIN (analysis_data);
-- CREATE INDEX idx_market_research_raw_data ON market_research_data USING GIN (raw_data);
-- CREATE INDEX idx_market_research_insights ON market_research_data USING GIN (processed_insights);

-- ============================================================================
-- SAMPLE DATA VIEWS (Optional)
-- ============================================================================

-- View for location analysis summary
/*
CREATE VIEW location_analysis_summary AS
SELECT 
    la.id,
    la.name,
    la.address,
    ST_X(la.coordinates) as longitude,
    ST_Y(la.coordinates) as latitude,
    la.opportunity_score,
    la.competition_level,
    la.foot_traffic_score,
    la.demographic_match,
    la.revenue_potential,
    rp.name as restaurant_name,
    rp.cuisine_type,
    COUNT(ca.id) as competitor_count
FROM location_analyses la
LEFT JOIN restaurant_profiles rp ON la.restaurant_profile_id = rp.id
LEFT JOIN competitor_analyses ca ON ca.location_analysis_id = la.id
WHERE la.published_at IS NOT NULL
GROUP BY la.id, rp.id;
*/

-- ============================================================================
-- NOTES
-- ============================================================================

-- 1. This schema will be automatically generated by Strapi based on content types
-- 2. PostGIS extension provides geospatial capabilities
-- 3. JSONB columns allow flexible storage of complex analysis data
-- 4. Indexes are optimized for common query patterns
-- 5. Foreign key relationships maintain data integrity
-- 6. Timestamps track creation and modification times
-- 7. Published_at fields support Strapi's draft/publish workflow
