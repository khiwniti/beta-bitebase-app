# Docker Compose for BiteBase Production Backend
# Optimized for Render.com deployment and local testing

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bitebase-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-bitebase_production}
      POSTGRES_USER: ${POSTGRES_USER:-bitebase}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/production-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bitebase}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bitebase-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-secure_redis_password}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend-network

  # BiteBase Production Backend
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
      target: production
    container_name: bitebase-backend
    environment:
      # Core Configuration
      - NODE_ENV=production
      - PORT=3001
      - HOSTNAME=0.0.0.0
      
      # Database Configuration
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bitebase}:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/${POSTGRES_DB:-bitebase_production}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379/0
      
      # Security Configuration
      - JWT_SECRET=${JWT_SECRET:-your-super-secure-jwt-secret-minimum-32-characters-change-this}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-your-super-secure-refresh-secret-minimum-32-characters-change-this}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-your-32-character-encryption-key-change-this}
      - SESSION_SECRET=${SESSION_SECRET:-your-session-secret-minimum-32-characters-change-this}
      
      # CORS and Frontend
      - CORS_ORIGIN=${CORS_ORIGIN:-https://your-frontend-domain.onrender.com}
      - NEXT_PUBLIC_SITE_URL=${NEXT_PUBLIC_SITE_URL:-https://your-frontend-domain.onrender.com}
      
      # AI Configuration
      - AI_MODE=${AI_MODE:-api}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY:-}
      
      # Local AI (if available)
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-}
      - VLLM_BASE_URL=${VLLM_BASE_URL:-}
      - MPC_PRIMARY_URL=${MPC_PRIMARY_URL:-}
      - MPC_SECONDARY_URL=${MPC_SECONDARY_URL:-}
      - MPC_TERTIARY_URL=${MPC_TERTIARY_URL:-}
      
      # Payment Processing
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY:-}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET:-}
      - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY:-}
      
      # Email Services
      - SENDGRID_API_KEY=${SENDGRID_API_KEY:-}
      - SENDGRID_FROM_EMAIL=${SENDGRID_FROM_EMAIL:-noreply@bitebase.app}
      
      # External APIs
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY:-}
      - GOOGLE_PLACES_API_KEY=${GOOGLE_PLACES_API_KEY:-}
      - MAPBOX_ACCESS_TOKEN=${MAPBOX_ACCESS_TOKEN:-}
      
      # Monitoring and Analytics
      - SENTRY_DSN=${SENTRY_DSN:-}
      - GOOGLE_ANALYTICS_ID=${GOOGLE_ANALYTICS_ID:-}
      - MIXPANEL_TOKEN=${MIXPANEL_TOKEN:-}
      - AMPLITUDE_API_KEY=${AMPLITUDE_API_KEY:-}
      - DATADOG_API_KEY=${DATADOG_API_KEY:-}
      
      # Social Media & Marketing
      - FACEBOOK_APP_ID=${FACEBOOK_APP_ID:-}
      - TWITTER_API_KEY=${TWITTER_API_KEY:-}
      - LINKEDIN_CLIENT_ID=${LINKEDIN_CLIENT_ID:-}
      - HUBSPOT_API_KEY=${HUBSPOT_API_KEY:-}
      
      # Enterprise Features
      - OKTA_DOMAIN=${OKTA_DOMAIN:-}
      - OKTA_CLIENT_ID=${OKTA_CLIENT_ID:-}
      - OKTA_CLIENT_SECRET=${OKTA_CLIENT_SECRET:-}
      
      # Rate Limiting
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      - RATE_LIMIT_PREMIUM_MAX=${RATE_LIMIT_PREMIUM_MAX:-1000}
      
      # File Storage
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET:-}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      
      # Backup & Recovery
      - BACKUP_ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY:-}
      - BACKUP_S3_BUCKET=${BACKUP_S3_BUCKET:-}
      
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
      - backend_temp:/app/temp
      - backend_cache:/app/cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Nginx Reverse Proxy (Optional for local testing)
  nginx:
    image: nginx:alpine
    container_name: bitebase-nginx
    volumes:
      - ./nginx/backend.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "${NGINX_PORT:-80}:80"
    depends_on:
      - backend
    restart: unless-stopped
    profiles:
      - nginx
    networks:
      - backend-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local
  backend_temp:
    driver: local
  backend_cache:
    driver: local

networks:
  backend-network:
    driver: bridge
    name: bitebase-backend-network
