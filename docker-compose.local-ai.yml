# Docker Compose for BiteBase Local AI Infrastructure
# Provides complete local AI stack without external API dependencies

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: bitebase_local
      POSTGRES_USER: bitebase
      POSTGRES_PASSWORD: bitebase_secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/production-schema.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bitebase"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ollama Server
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Ollama Model Downloader (Init Container)
  ollama-setup:
    image: ollama/ollama:latest
    depends_on:
      - ollama
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=ollama:11434
    command: >
      sh -c "
        sleep 30 &&
        ollama pull llama3.1:8b &&
        ollama pull mistral:7b &&
        ollama pull neural-chat:7b &&
        ollama pull phi3:mini &&
        ollama pull codellama:13b
      "
    restart: "no"

  # vLLM Server - Primary Model
  vllm-primary:
    image: vllm/vllm-openai:latest
    ports:
      - "8000:8000"
    volumes:
      - vllm_models:/models
      - vllm_cache:/cache
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - HF_HOME=/cache
      - VLLM_WORKER_MULTIPROC_METHOD=spawn
    command: >
      --model meta-llama/Meta-Llama-3.1-8B-Instruct
      --host 0.0.0.0
      --port 8000
      --tensor-parallel-size 1
      --max-model-len 4096
      --served-model-name llama3.1-8b
      --trust-remote-code
      --download-dir /models
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 30s
      retries: 3

  # vLLM Server - Secondary Model
  vllm-secondary:
    image: vllm/vllm-openai:latest
    ports:
      - "8001:8000"
    volumes:
      - vllm_models:/models
      - vllm_cache:/cache
    environment:
      - CUDA_VISIBLE_DEVICES=1
      - HF_HOME=/cache
      - VLLM_WORKER_MULTIPROC_METHOD=spawn
    command: >
      --model mistralai/Mistral-7B-Instruct-v0.3
      --host 0.0.0.0
      --port 8000
      --tensor-parallel-size 1
      --max-model-len 4096
      --served-model-name mistral-7b
      --trust-remote-code
      --download-dir /models
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    profiles:
      - multi-gpu
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 30s
      retries: 3

  # vLLM Server - CPU Only (Fallback)
  vllm-cpu:
    image: vllm/vllm-openai:latest
    ports:
      - "8002:8000"
    volumes:
      - vllm_models:/models
      - vllm_cache:/cache
    environment:
      - HF_HOME=/cache
    command: >
      --model microsoft/DialoGPT-medium
      --host 0.0.0.0
      --port 8000
      --tensor-parallel-size 1
      --max-model-len 2048
      --served-model-name dialogpt-cpu
      --device cpu
      --download-dir /models
    restart: unless-stopped
    profiles:
      - cpu-only
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 30s
      retries: 3

  # MPC Server 1 (Primary)
  mpc-server-1:
    build:
      context: ./ai-infrastructure/mpc
      dockerfile: Dockerfile
    ports:
      - "9000:9000"
    environment:
      - MPC_SERVER_ID=primary
      - MPC_PORT=9000
      - MPC_PRIVACY_LEVEL=high
    command: python mpc_server.py 9000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MPC Server 2 (Secondary)
  mpc-server-2:
    build:
      context: ./ai-infrastructure/mpc
      dockerfile: Dockerfile
    ports:
      - "9001:9000"
    environment:
      - MPC_SERVER_ID=secondary
      - MPC_PORT=9000
      - MPC_PRIVACY_LEVEL=high
    command: python mpc_server.py 9000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MPC Server 3 (Tertiary)
  mpc-server-3:
    build:
      context: ./ai-infrastructure/mpc
      dockerfile: Dockerfile
    ports:
      - "9002:9000"
    environment:
      - MPC_SERVER_ID=tertiary
      - MPC_PORT=9000
      - MPC_PRIVACY_LEVEL=high
    command: python mpc_server.py 9000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # BiteBase Backend with Local AI
  bitebase-backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile.local-ai
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://bitebase:bitebase_secure_password@postgres:5432/bitebase_local
      - REDIS_URL=redis://redis:6379/0
      - OLLAMA_BASE_URL=http://ollama:11434
      - VLLM_BASE_URL=http://vllm-primary:8000
      - MPC_PRIMARY_URL=http://mpc-server-1:9000
      - MPC_SECONDARY_URL=http://mpc-server-2:9000
      - MPC_TERTIARY_URL=http://mpc-server-3:9000
      - AI_MODE=local
      - AI_FALLBACK_ENABLED=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
      vllm-primary:
        condition: service_healthy
      mpc-server-1:
        condition: service_healthy
      mpc-server-2:
        condition: service_healthy
      mpc-server-3:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # BiteBase Frontend
  bitebase-frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_AI_MODE=local
    depends_on:
      - bitebase-backend
    restart: unless-stopped

  # AI Monitoring Dashboard
  ai-monitor:
    image: grafana/grafana:latest
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  ollama_data:
  vllm_models:
  vllm_cache:
  grafana_data:
  prometheus_data:

networks:
  default:
    name: bitebase-ai-network
