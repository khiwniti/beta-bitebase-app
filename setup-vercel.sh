#!/bin/bash

# BiteBase Vercel Setup Script
# This script helps set up the project for Vercel deployment

set -e

echo "üîß BiteBase Vercel Setup"
echo "======================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if Vercel CLI is installed
if ! command -v vercel &> /dev/null; then
    echo -e "${YELLOW}üì¶ Installing Vercel CLI...${NC}"
    npm install -g vercel
    echo -e "${GREEN}‚úÖ Vercel CLI installed${NC}"
else
    echo -e "${GREEN}‚úÖ Vercel CLI already installed${NC}"
fi

# Check if user is logged in to Vercel
if ! vercel whoami &> /dev/null; then
    echo -e "${YELLOW}üîê Please login to Vercel...${NC}"
    vercel login
else
    echo -e "${GREEN}‚úÖ Already logged in to Vercel${NC}"
fi

# Get the script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BACKEND_PATH="$SCRIPT_DIR/apps/backend"
FRONTEND_PATH="$SCRIPT_DIR/apps/frontend"

echo -e "\n${BLUE}üìÅ Project Structure:${NC}"
echo "Backend: $BACKEND_PATH"
echo "Frontend: $FRONTEND_PATH"

# Setup backend environment
echo -e "\n${BLUE}üîß Setting up Backend Environment...${NC}"
if [ ! -f "$BACKEND_PATH/.env.local" ]; then
    cp "$BACKEND_PATH/.env.example" "$BACKEND_PATH/.env.local"
    echo -e "${YELLOW}üìù Created backend .env.local from example${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Please edit $BACKEND_PATH/.env.local with your actual values${NC}"
else
    echo -e "${GREEN}‚úÖ Backend .env.local already exists${NC}"
fi

# Setup frontend environment
echo -e "\n${BLUE}üîß Setting up Frontend Environment...${NC}"
if [ ! -f "$FRONTEND_PATH/.env.local" ]; then
    cp "$FRONTEND_PATH/.env.example" "$FRONTEND_PATH/.env.local"
    echo -e "${YELLOW}üìù Created frontend .env.local from example${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Please edit $FRONTEND_PATH/.env.local with your actual values${NC}"
else
    echo -e "${GREEN}‚úÖ Frontend .env.local already exists${NC}"
fi

# Install dependencies
echo -e "\n${BLUE}üì¶ Installing Dependencies...${NC}"

echo -e "${YELLOW}Installing backend dependencies...${NC}"
cd "$BACKEND_PATH"
npm install
echo -e "${GREEN}‚úÖ Backend dependencies installed${NC}"

echo -e "${YELLOW}Installing frontend dependencies...${NC}"
cd "$FRONTEND_PATH"
npm install
echo -e "${GREEN}‚úÖ Frontend dependencies installed${NC}"

cd "$SCRIPT_DIR"

# Test builds locally
echo -e "\n${BLUE}üß™ Testing Local Builds...${NC}"

echo -e "${YELLOW}Testing backend build...${NC}"
cd "$BACKEND_PATH"
npm run build
echo -e "${GREEN}‚úÖ Backend build successful${NC}"

echo -e "${YELLOW}Testing frontend build...${NC}"
cd "$FRONTEND_PATH"
npm run build
echo -e "${GREEN}‚úÖ Frontend build successful${NC}"

cd "$SCRIPT_DIR"

# Create deployment checklist
echo -e "\n${GREEN}üéâ Setup Complete!${NC}"
echo -e "\n${BLUE}üìã Pre-Deployment Checklist:${NC}"
echo "1. ‚úÖ Vercel CLI installed and configured"
echo "2. ‚úÖ Dependencies installed"
echo "3. ‚úÖ Local builds tested"
echo "4. ‚ö†Ô∏è  Configure environment variables in .env.local files"
echo "5. ‚ö†Ô∏è  Set up external services (database, Redis, Stripe, etc.)"
echo "6. ‚ö†Ô∏è  Test local development servers"

echo -e "\n${BLUE}üîó Required External Services:${NC}"
echo "‚Ä¢ PostgreSQL Database (Supabase, PlanetScale, or Neon)"
echo "‚Ä¢ Redis Instance (Upstash or Redis Cloud)"
echo "‚Ä¢ Stripe Account (for payments)"
echo "‚Ä¢ Google Cloud Console (for OAuth and Maps)"
echo "‚Ä¢ OpenAI API Key (for AI features)"

echo -e "\n${BLUE}üöÄ Next Steps:${NC}"
echo "1. Edit environment files:"
echo "   - $BACKEND_PATH/.env.local"
echo "   - $FRONTEND_PATH/.env.local"
echo ""
echo "2. Test locally:"
echo "   - cd apps/backend && npm run dev"
echo "   - cd apps/frontend && npm run dev"
echo ""
echo "3. Deploy to Vercel:"
echo "   - ./deploy-vercel.sh --production"
echo ""
echo "4. Configure environment variables in Vercel dashboard"
echo ""
echo "5. Set up custom domains (optional)"

echo -e "\n${YELLOW}üìñ For detailed instructions, see: VERCEL_DEPLOYMENT_GUIDE.md${NC}"